package com.cg.fms.Service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.cg.fms.dao.IProductDao;
import com.cg.fms.entity.Order;
import com.cg.fms.entity.Product;
import com.cg.fms.model.CustomerModel;
import com.cg.fms.model.LandModel;
import com.cg.fms.model.OrderModel;
import com.cg.fms.model.ProductModel;
import com.cg.fms.service.ProductServiceImpl;

@ExtendWith(MockitoExtension.class)
public class ProductTest {
	
	@Mock
	private IProductDao repo;
	@InjectMocks
	ProductServiceImpl service;

	@Test
	@DisplayName("Product Details should retrive")
	void testGetAll() {
		List<Product> testData=Arrays.asList(new Product[] {
				new Product("11","timber wood","100","best wood in india."),
				new Product("12","timber wood","150","best wood in india.")
		});
		
		Mockito.when(repo.findAll()).thenReturn(testData);
		
		List<ProductModel> expected=Arrays.asList(new ProductModel[] {
				new ProductModel("11","timber wood","150","best wood in india."),
				new ProductModel("11","timber wood","150","best wood in india.")
		});
		
		List<LandModel> actual = service.findAll();
		
		assertEquals(expected,actual);

	}
	
	@Test
	@DisplayName("get by product id ")
	void testGetById () {
		
		Product testdata=new Product("11","timber wood","150","best wood in india.");
		
		ProductModel expected=new ProductModel("11","timber wood","150","best wood in india.");
		
		Mockito.when(repo.findById(testdata.getProductId())).thenReturn(Optional.of(testdata));
	
		CustomerModel actual=service.findById(testdata.getProductId());
		
		
		assertEquals(expected,actual);
	}
	
	@Test
	@DisplayName("get by Order id return null")
	void testGetByIdNull() {		
		Mockito.when(repo.findById("4"));
		
		CustomerModel actual = service.findById("1");
		assertNull(actual);
	}
	
	@Test
	@DisplayName("exists by land Id ")
	void testExistsBynumber () {
		OrderModel id=new OrderModel("1",null,null,null,"chennai","2020-11-05","10000",null);
		Order testdata=new Order("1",null,null,null,"chennai","2020-11-05","10000",null);			
		boolean expected=true;
		
		Mockito.when(repo.existsById(testdata.getOrderNumber())).thenReturn(true);
	
		boolean actual=service.existsByOrderNumber(testdata.getOrderNumber());
		
		assertEquals(expected,actual);
	}
	
	@Test
	@DisplayName("get land id if not exists")//negative testcase
	void testGetByIdNotExists () {
		OrderModel id=new OrderModel("1",null,null,null,"chennai","2020-11-05","10000",null);
		Order testdata=new Order("1",null,null,null,"chennai","2020-11-05","10000",null);
		
		Mockito.when(repo.findById(testdata.getOrderNumber())).thenReturn(Optional.empty());
		
		CustomerModel actual = service.findById(testdata.getOrderNumber());
		assertNull(actual);

	}

}
