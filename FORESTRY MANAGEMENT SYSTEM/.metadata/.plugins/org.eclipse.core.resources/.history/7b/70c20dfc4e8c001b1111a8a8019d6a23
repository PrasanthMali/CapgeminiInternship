package com.cg.fms.Service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.cg.fms.dao.ContractDao;
import com.cg.fms.entity.Admin;
import com.cg.fms.entity.Contract;
import com.cg.fms.model.AdminModel;
import com.cg.fms.model.ContractModel;
import com.cg.fms.service.ContractServiceImpl;

@ExtendWith(MockitoExtension.class)
public class ContractTest {
	@Mock
	private ContractDao repo;
	@InjectMocks
	ContractServiceImpl service;

	@Test
	@DisplayName("contract Details should retrive")
	void testGetAll() {
		List<Contract> testData=Arrays.asList(new Contract[] {
				new Contract("2",null, null, "kolkata","2020-11-11","105", null),
				new Contract("1",null, null, "chennai","2020-12-12","100", null)
		});
		
		Mockito.when(repo.findAll()).thenReturn(testData);
		
		List<ContractModel> expected=Arrays.asList(new ContractModel[] {
				new ContractModel("2",null, null, "kolkata","2020-11-11","105", null),
				new ContractModel("1",null, null, "chennai","2020-12-12","100", null)
		});
		
		List<AdminModel> actual = service.findAll();
		
		assertEquals(expected,actual);

	}
	
	@Test
	@DisplayName("get by admin id ")
	void testGetById () {
		Admin testdata=new Admin(4,"paresh","12");
		
		AdminModel expected=new AdminModel(3,"r sai krishna","123");
		
		Mockito.when(repo.findById(testdata.getAdminId())).thenReturn(Optional.of(testdata));
	
		AdminModel actual=service.findById(testdata.getAdminId());
		
		assertEquals(expected,actual);
	}
	
	@Test
	@DisplayName("get by admin id return null")
	void testGetByIdNull() {		
		
		Mockito.when(repo.findById(1)).thenReturn(Optional.empty());
		
		AdminModel actual = service.findById(1);
		assertNull(actual);
	}
	
	@Test
	@DisplayName("exists by admin id ")
	void testExistsBynumber () {
		AdminModel id=new AdminModel(6,"prasanth","1234567");
		Admin testdata=new Admin(5,"sai tarun","123456");
		
		boolean expected=true;
		
		Mockito.when(repo.existsByAdminId(testdata.getAdminId())).thenReturn(true);
	
		boolean actual=service.existsByAdminId(testdata.getAdminId());
		
		assertEquals(expected,actual);
	}
	@Test
	@DisplayName("get admin  Id if not exists")
	void testGetByIdNotExists () {
		AdminModel id=new AdminModel(7,"bhargav sai","12345678");
		Admin testdata=new Admin(10,"wrond admin","12098342");
		
		Mockito.when(repo.findById(testdata.getAdminId())).thenReturn(Optional.empty());
		
		AdminModel actual = service.findById(testdata.getAdminId());
		assertNull(actual);
	}
}
